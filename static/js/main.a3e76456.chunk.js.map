{"version":3,"sources":["firebase.js","List.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","inputChange","e","preventDefault","copy","state","userInput","target","value","setState","inputQChange","addItem","itemToAdd","itemToAddQuantity","console","log","newListArray","newHowMuch","push","list","howMuch","firebaseObj","update","deleteList","listEl","child","remove","deleteAll","set","database","ref","this","on","snapshot","val","data","propertyName","action","htmlFor","onChange","type","id","placeholder","onClick","visitorCount","map","listItem","index","quantity","Component","ToDoApp","className","List","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a3e76456.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCXCtlbMciyKpnBzkHo8uiR88eN9nsjviw\",\r\n    authDomain: \"todoapp-674d3.firebaseapp.com\",\r\n    databaseURL: \"https://todoapp-674d3.firebaseio.com\",\r\n    projectId: \"todoapp-674d3\",\r\n    storageBucket: \"todoapp-674d3.appspot.com\",\r\n    messagingSenderId: \"21993319173\",\r\n    appId: \"1:21993319173:web:11c8b51fb05535a927e56c\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport firebase from './firebase';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n        list: [],\r\n        howMuch: [],\r\n        firebaseObj: firebase.database().ref(),\r\n        userInput: []\r\n        }\r\n    }\r\n\r\n    inputChange = (e) => {\r\n        e.preventDefault();\r\n        const copy = this.state.userInput;\r\n        copy[0] = e.target.value;\r\n\r\n        this.setState({\r\n            userInput: copy, \r\n        })\r\n\r\n        // Have to input twice!!! WAS BEFORE\r\n        // this.setState(({val}), () => {\r\n        //     this.state.userInput[0] = val\r\n        //     console.log(this.state.userInput);\r\n        // })\r\n    }\r\n\r\n    // doesn't work properly\r\n    // inputChange = (e) => {\r\n    //     e.preventDefault();\r\n\r\n    //     this.setState({userInput: [...this.state.userInput, e.target.value]}, () => {\r\n    //         console.log(this.state.userInput);\r\n    //     })\r\n    // }\r\n\r\n    inputQChange = (e) => {\r\n        e.preventDefault();\r\n        const copy = this.state.userInput;\r\n        copy[1] = e.target.value;\r\n\r\n        this.setState({\r\n            userInput: copy, \r\n        })\r\n\r\n    //WAS BEFORE\r\n        // e.preventDefault();\r\n        // const val = e.target.value;\r\n\r\n        // this.setState(({val}), () => {\r\n        //     this.state.userInput[1] = val;\r\n        //     console.log(this.state.userInput);\r\n        // })\r\n    }\r\n    \r\n    addItem = (e) => {\r\n        e.preventDefault();\r\n\r\n        const itemToAdd = this.state.userInput[0];\r\n        const itemToAddQuantity = this.state.userInput[1];\r\n        console.log(itemToAdd, itemToAddQuantity);\r\n        \r\n        const newListArray = []; \r\n        const newHowMuch = [];\r\n        newListArray.push(itemToAdd);\r\n        newHowMuch.push(itemToAddQuantity);\r\n\r\n        this.setState({\r\n            list: newListArray,\r\n            howMuch: newHowMuch,\r\n            userInput: [\"\", \"\"]\r\n        })\r\n\r\n        this.state.firebaseObj.update({[newListArray]: newHowMuch});\r\n    }\r\n\r\n    // removing a certain list element\r\n    deleteList = (listEl) => {    \r\n        this.state.firebaseObj.child(listEl).remove();\r\n    }\r\n\r\n    // emptying the whole list\r\n    deleteAll = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            list: [],\r\n            howMuch: []\r\n        })\r\n\r\n        this.state.firebaseObj.set(null);\r\n    }\r\n\r\n    // getting up-to-date data from database\r\n    componentDidMount() {\r\n\r\n    this.state.firebaseObj.on('value', (snapshot) => {\r\n        console.log(snapshot.val());\r\n\r\n        const data = snapshot.val();\r\n        const newListArray = [];\r\n        const newHowMuch = [];\r\n\r\n        for (let propertyName in data) {\r\n            newListArray.push(propertyName);\r\n            newHowMuch.push(data[propertyName]);\r\n        }\r\n\r\n        console.log(newListArray);\r\n\r\n        this.setState({\r\n            list: newListArray,\r\n            howMuch: newHowMuch\r\n        })\r\n\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form action=\"\">\r\n                    <fieldset>\r\n                        <label htmlFor=\"itemInput\">Input field</label>\r\n                        <input onChange={this.inputChange} value={this.state.userInput[0]} type=\"text\" id=\"itemInput\" placeholder=\"item\"></input>\r\n\r\n                        <label htmlFor=\"itemQuantity\">Input field</label>\r\n                        <input onChange={this.inputQChange} value={this.state.userInput[1]} type=\"text\" id=\"itemQuantity\" placeholder=\"quantity\"></input>\r\n\r\n                        <button onClick={this.addItem}>Add</button>\r\n                        <button onClick={this.deleteAll}>Remove All</button>\r\n                    </fieldset>\r\n                </form>\r\n\r\n                <p>{this.state.visitorCount}</p>\r\n\r\n                <ul>\r\n                {\r\n                    this.state.list.map( (listItem, index) => {\r\n                        const quantity = this.state.howMuch[index]\r\n                        \r\n                        return (\r\n                            <li>\r\n                                {listItem}\r\n                                <span>{quantity}</span>\r\n                                <button onClick={ () => this.deleteList(listItem)} >Remove</button>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\nimport List from \"./List\";\nimport './App.css';\n\nclass ToDoApp extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>To do</h1>\n        <List />\n      </div>\n    );\n  }\n}\n\nexport default ToDoApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}